{"version":3,"sources":["images/games.jpg","components/scatterPlot/scatterPlot.js","components/analysis/analysis.js","components/results/results.js","components/overview/overview.js","components/MainInfoComp.js","components/data/data.js","components/about/about.js","components/NavBarComp.js","App.js","serviceWorker.js","index.js","images/2pg.jpg","images/formula.PNG","images/beautifulSoup.png","images/trevor-baptiste.jpg","images/farrell.jpg","images/lizards.jpg"],"names":["module","exports","ScatterPlot","chartRef","React","createRef","regrData","lineOfBestFit","pointBackgroundColors","this","props","xValues","forEach","value","push","x","y","yValues","indexOf","regrDataMapped_xTimesy","map","element","min","Math","max","suggestedMinX","floor","suggestedMaxX","ceil","suggestedMinY","suggestedMaxY","incrementAmount","i","yVal","m","b","myChartRef","current","getContext","Chart","type","data","datasets","label","title","backgroundColor","pointBackgroundColor","pointRadius","pointHoverRadius","showLine","fill","borderColor","options","scales","yAxes","scaleLabel","display","labelString","yLabel","ticks","suggestedMin","suggestedMax","xAxes","xLabel","id","ref","Component","AnalysisComp","plotWrapperStyles","margin","marginBottom","minWidth","width","plotParentStyles","flexWrap","EffectiveDifferenceData","style","ResultsComp","OverviewComp","className","maxWidth","jusitfyContent","alt","borderRadius","src","formulaCode","twoPointer","MainInfoComp","padding","DataComp","linkStyle","textDecoration","imgWrapper","imgStyles","marginTop","flexManagerStyles","flexChildBigStyles","cardStyles","class","href","beautifulSoup","farrell","trevor","lizards","AboutComp","NavBarComp","state","isOpen","toggleCollapse","setState","noMatchingPathStyles","textAlign","basename","color","dark","expand","to","onClick","navbar","left","exact","path","component","location","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qMAAAA,EAAOC,QAAU,IAA0B,mC,uKCItBC,E,2MACjBC,SAAWC,IAAMC,Y,mFAII,IAAD,OACZC,EAAW,GACXC,EAAgB,GAChBC,EAAwB,GAE5BC,KAAKC,MAAMC,QAAQC,SAAS,SAACC,GACzBP,EAASQ,KAAK,CAAEC,EAAEF,EACdG,EAAE,EAAKN,MAAMO,QAAQ,EAAKP,MAAMC,QAAQO,QAAQL,MAEpDL,EAAsBM,KAAK,WAI/B,IAAMK,EAAyBb,EAASc,KAAK,SAAAC,GAAO,OAAIA,EAAQN,EAAIM,EAAQL,KACtEM,EAAMhB,EAAUa,EAAuBD,QAASK,KAAKD,IAAL,MAAAC,KAAI,YAASJ,MACnEX,EAAsBF,EAASY,QAAQI,IAAQ,MAC/C,IAAME,EAAMlB,EAAUa,EAAuBD,QAASK,KAAKC,IAAL,MAAAD,KAAI,YAASJ,MACnEX,EAAsBF,EAASY,QAAQM,IAAQ,QAS/C,IAPA,IAAMC,EAAgBF,KAAKG,MAAQJ,EAAIP,EAAc,GAARO,EAAIP,GAC3CY,EAAgBJ,KAAKK,KAAOJ,EAAIT,EAAc,GAARS,EAAIT,GAC1Cc,EAAgBN,KAAKG,MAAQJ,EAAIN,EAAc,GAARM,EAAIN,GAC3Cc,EAAeP,KAAKG,MAAQJ,EAAIN,EAAc,GAARM,EAAIN,GAG1Ce,EAAkBR,KAAKK,MAAQD,EAAgBF,GAAkB,KAC9DO,EAAIP,EAAeO,GAAKL,EAAeK,GAAQD,EAAiB,CACpE,IAAME,EAASD,EAAIvB,KAAKC,MAAMwB,EAAMzB,KAAKC,MAAMyB,EAC/C5B,EAAcO,KAAM,CAAEC,EAAEiB,EAAEhB,EAAEiB,IAIjC,IAAMG,EAAa3B,KAAKN,SAASkC,QAAQC,WAAW,MACpD,IAAIC,IAAMH,EAAY,CAClBI,KAAM,UACNC,KAAM,CACFC,SAAU,CACN,CACIC,MAAOlC,KAAKC,MAAMkC,MAClBH,KAAMnC,EACNuC,gBAAgB,OAChBC,qBAAsBtC,EACtBuC,YAAa,EACbC,iBAAkB,GAEtB,CACIL,MAAO,WACPF,KAAMlC,EACNuC,qBAAsB,UACtBG,UAAS,EACTJ,gBAAgB,UAChBK,KAAK,OACLC,YAAY,UACZJ,YAAa,KAIzBK,QAAS,CACLC,OAAQ,CACJC,MAAO,CAAC,CACNC,WAAY,CACVC,SAAS,EACTC,YAAahD,KAAKC,MAAMgD,QAE5BC,MAAM,CACFC,aAAc/B,EACdgC,aAAc/B,KAGlBgC,MAAO,CAAC,CACJP,WAAY,CACVC,SAAS,EACTC,YAAahD,KAAKC,MAAMqD,QAG9BJ,MAAM,CACFC,aAAcnC,EACdoC,aAAclC,W,+BAQ9B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACA,4BACIqC,GAAG,UACHC,IAAKxD,KAAKN,iB,GA/FW+D,aCiE1BC,MAlEf,WAEE,IAKMC,EAAoB,CACxBZ,QAAQ,QACRa,OAAQ,OACRC,aAAa,OACbC,SAAS,QACTC,MAAM,OAMFC,EAAmB,CACvBjB,QAAQ,OACRkB,SAAU,OACVL,OAAO,OACPG,MAAM,OAKFG,EAA0B,CAC9B/B,MAAO,iBACPmB,OAAQ,QACRL,OAAQ,QACR/C,QAAS,CAAE,EAAI,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,GACzCM,QAAS,CAAE,EAAI,EAAG,EAAI,EAAI,EAAI,EAAI,EAAI,EAAG,GACzCiB,EAAG,KACHC,EAAG,MAIL,OAEA,yBAAKyC,MAtCmB,CACtBpB,QAAQ,QACRa,OAAO,SAqCP,yBAAMO,MAAQH,GACZ,yBAAMG,MAAOR,GACb,kBAAC,EAAD,eAAaQ,MA5BE,IA4BqBD,KAGpC,yBAAMC,MAAOR,GACb,kBAAC,EAAgBO,KAInB,yBAAMC,MAAQH,GACd,yBAAMG,MAAOR,GACX,kBAAC,EAAgBO,IAGjB,yBAAMC,MAAOR,GACb,kBAAC,EAAgBO,OCrDRE,MALf,WACE,OAAS,uD,oECuEIC,MAnEf,WAiCE,OAAQ,6BACN,kBAAC,IAAD,CAAMC,UAAW,qBACb,kBAAC,IAAD,sWAUF,6BACA,yBAAKf,GAAI,qBAAqBY,MArBG,CAC/BI,SAAU,QACVxB,QAAQ,QACRa,OAAO,SAmBT,yBAAKL,GAAI,iBAAiBY,MA7CC,CACzBpB,QAAQ,OACRkB,SAAU,OACVO,eAAe,WA2Cb,yBAAKC,IAAI,0BAA0BN,MAxCjB,CACpBpB,QAAQ,QACRa,OAAO,OACPW,SAAU,QACVV,aAAc,KACdE,MAAM,MACNW,aAAa,OAkC8CC,IAAKC,MAC9D,yBAAKH,IAAI,yBAAyBN,MAhCd,CACtBpB,QAAQ,QACRa,OAAO,OACPW,SAAU,QACVR,MAAM,MACNW,aAAa,OA2BgDC,IAAKE,QAGpE,6BAEA,kBAAC,IAAD,CAAMP,UAAW,qBACf,kBAAC,IAAD,8iBCrCOQ,MArBf,WAME,OACE,yBAAKX,MALc,CACjBP,OAAO,IACPmB,QAAQ,MAIR,wBAAIT,UAAW,gBAAf,wBACA,kBAAC,EAAD,MACA,6BAAS,6BACT,wBAAIA,UAAY,gBAAhB,cACA,kBAAC,EAAD,MACA,6BAAS,6BACT,wBAAIA,UAAY,gBAAhB,aACA,kBAAC,EAAD,Q,2EC2KSU,MAnLf,WAEE,IAAMC,EAAY,CAChBC,eAAgB,aAGZC,EAAa,CACjBpC,QAAQ,QACRa,OAAO,OACPG,MAAM,MACND,SAAS,SAGLsB,EAAY,CACdrC,QAAQ,QACRa,OAAO,OACPW,SAAU,QACVV,aAAc,OACdwB,UAAU,OACVtB,MAAM,MACNW,aAAa,OAGXY,EAAoB,CACxBvC,QAAQ,OACRyB,eAAe,SACfP,SAAU,OACVM,SAAS,SACTX,OAAO,QAGH2B,EAAqB,CACzBxC,QAAQ,QACRa,OAAO,OACPW,SAAU,QACVT,SAAU,QACVC,MAAM,OAGFyB,EAAa,CACjBzB,MAAO,QAGT,OACE,yBAAKO,UAAW,iBAChB,yBAAKH,MAAOmB,EAAmBG,MAAO,eACpC,yBAAKtB,MAAOoB,GACZ,wBAAIjB,UAAU,gBAAd,qBACA,kBAAC,IAAD,CAAOA,UAAU,oBAAoBH,MAAQqB,GAC3C,kBAAC,IAAD,+NAIE,uBAAGE,KAAO,4CAAV,QAJF,OAKE,uBAAGA,KAAO,oDAAV,UALF,sDAOE,6BAAS,6BAPX,kFASG,uBAAGA,KAAK,0DAAR,oBATH,kBAUG,uBAAGA,KAAK,2CAAR,aAVH,mVAcG,6BAAS,6BAdZ,iCAeiC,uBAAGA,KAAM,GAAGvB,MAAOc,GAAnB,eAC/B,6BAAS,gCAKb,yBAAKd,MAAQgB,GACX,yBAAMhB,MAAOiB,EAAWT,IAAMgB,IAAelB,IAAI,oBAIrD,6BA/BA,IA+BU,6BAER,yBAAKN,MAAOmB,EAAmBG,MAAO,eACpC,yBAAKtB,MAAOoB,GACV,wBAAIjB,UAAU,gBAAd,cACE,kBAAC,IAAD,CAAOA,UAAU,oBAAoBH,MAAQqB,GAC3C,kBAAC,IAAD,yVAKE,6BAAS,6BALX,2fAWE,6BAAS,6BAXX,0YAgBE,6BAAS,6BACT,uBAAGE,KAAM,6EAA6EvB,MAAOc,GAA7F,qBAKR,yBAAKQ,MAAO,YAAYtB,MAAQgB,GAC9B,yBAAMhB,MAAOiB,EAAWT,IAAMiB,IAASnB,IAAK,qBAIlD,6BAhEA,IAgEU,6BAEV,yBAAKN,MAAOmB,EAAmBG,MAAO,eACpC,yBAAKtB,MAAOoB,GACV,wBAAIjB,UAAU,gBAAd,cACE,kBAAC,IAAD,CAAOA,UAAU,oBAAoBH,MAAQqB,GAC3C,kBAAC,IAAD,qVAG0F,uBAAGE,KAAM,4BAAT,qBAH1F,gHAKE,6BAAS,6BACT,uBAAGA,KAAM,sEAAsEvB,MAAOc,GAAtF,sBACA,6BAAS,6BAPX,wkBAaE,6BAAS,6BAbX,k7BAyBN,yBAAKQ,MAAO,YAAYtB,MAAQgB,GAC9B,yBAAMhB,MAAOiB,EAAWT,IAAMkB,IAAQpB,IAAK,sBAKhD,6BArGC,IAqGS,6BAET,yBAAKN,MAAOmB,EAAmBG,MAAO,eACpC,yBAAKtB,MAAOoB,GACV,wBAAIjB,UAAU,gBAAd,qBACE,kBAAC,IAAD,CAAOA,UAAU,oBAAoBH,MAAQqB,GAC3C,kBAAC,IAAD,+gBAME,6BAAS,6BANX,4BAQE,6BAAS,6BARX,m1BAmBN,yBAAKC,MAAO,YAAYtB,MAAQgB,GAC9B,yBAAMhB,MAAOiB,EAAWT,IAAMmB,IAASrB,IAAK,yBC/KrCsB,MALf,WACE,OAAS,sD,gBCyEIC,E,2MA9DfC,MAAQ,CACNC,QAAQ,G,EAGVC,eAAiB,WACf,EAAKC,SAAS,CAAEF,QAAS,EAAKD,MAAMC,U,wEAMlC,IAIMG,EAAuB,CAC3BtC,MAAM,MACNhB,QAAQ,QACRa,OAAO,OACP0C,UAAU,UAUd,OACE,kBAAC,IAAD,CAASC,SAAU,gCACjB,kBAAC,IAAD,CAAWC,MAAM,SAASC,MAAI,EAACC,OAAO,KAAKvC,MApBxB,CACjBN,aAAa,SAoBb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAY8C,GAAG,KAAI,4BAAQrC,UAAU,cAAlB,yBAEnB,kBAAC,IAAD,CAAkBsC,QAAS5G,KAAKmG,iBAChC,kBAAC,IAAD,CAAa5C,GAAG,kBAAkB2C,OAAQlG,KAAKiG,MAAMC,OAAQW,QAAM,GACjE,kBAAC,IAAD,CAAcC,MAAI,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYH,GAAG,SAAf,SAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,UAAf,aAOR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,QAAQC,UAAWjC,IACrC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,SAASC,UAAWlB,IACtC,kBAAC,IAAD,CAAOkB,UA/BY,SAAC,GAAD,EAAEC,SAAF,OAErB,yBAAK/C,MAAOkC,GACR,gCAAQ,yDAA8B,6BAAS,6BAAvC,oD,GA3BO5C,aCAV0D,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCKc8C,QACW,cAA7BC,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,2D,qBCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInB1I,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.702103c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/games.ffc67644.jpg\";","import React, { Component } from 'react'\r\nimport Chart from \"chart.js\";\r\nimport { Card , CardContent } from '@material-ui/core';\r\n\r\nexport default class ScatterPlot extends Component {\r\n    chartRef = React.createRef();\r\n    \r\n\r\n\r\n    componentDidMount() {\r\n        let regrData = []\r\n        let lineOfBestFit = []\r\n        let pointBackgroundColors = []\r\n        // create data from xVals an yVals \r\n        this.props.xValues.forEach( (value) => {\r\n            regrData.push({ x:value , \r\n                y:this.props.yValues[this.props.xValues.indexOf(value)]\r\n            })\r\n            pointBackgroundColors.push('blue')\r\n        });\r\n        //will be used to find min and max data points, mx of X * Y will be most northeast point\r\n        //min will will be most southwest point\r\n        const regrDataMapped_xTimesy = regrData.map( element => element.x * element.y  )\r\n        const min = regrData[ regrDataMapped_xTimesy.indexOf( Math.min( ...regrDataMapped_xTimesy ) ) ]\r\n        pointBackgroundColors[regrData.indexOf(min)] = 'red'\r\n        const max = regrData[ regrDataMapped_xTimesy.indexOf( Math.max( ...regrDataMapped_xTimesy ) ) ]\r\n        pointBackgroundColors[regrData.indexOf(max)] = 'green'\r\n\r\n        const suggestedMinX = Math.floor(  min.x - ( min.x * .10 ) )\r\n        const suggestedMaxX = Math.ceil(  max.x + ( max.x * .10 ) )\r\n        const suggestedMinY = Math.floor(  min.y - ( min.y * .10 ) )\r\n        const suggestedMaxY= Math.floor(  min.y - ( min.y * .10 ) )\r\n\r\n        //plot the line of best fit ( 100 points )\r\n        const incrementAmount = Math.ceil( ( suggestedMaxX - suggestedMinX ) / 100 )\r\n        for( let i = suggestedMinX; i <= suggestedMaxX; i = i + incrementAmount ){\r\n             const yVal = ( i * this.props.m ) + this.props.b \r\n             lineOfBestFit.push( { x:i,y:yVal})\r\n        }\r\n\r\n\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");       \r\n        new Chart(myChartRef, {\r\n            type: \"scatter\",\r\n            data: {\r\n                datasets: [\r\n                    {\r\n                        label: this.props.title,\r\n                        data: regrData,\r\n                        backgroundColor:'blue',\r\n                        pointBackgroundColor: pointBackgroundColors,\r\n                        pointRadius: 3,\r\n                        pointHoverRadius: 6\r\n                    },\r\n                    {\r\n                        label: \"Best Fit\",\r\n                        data: lineOfBestFit,\r\n                        pointBackgroundColor: '#ff19af',\r\n                        showLine:true,\r\n                        backgroundColor:'#ff19af',\r\n                        fill:'none',\r\n                        borderColor:'#ff19af',\r\n                        pointRadius: 0\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                scales: {\r\n                    yAxes: [{\r\n                      scaleLabel: {\r\n                        display: true,\r\n                        labelString: this.props.yLabel,\r\n                    },\r\n                    ticks:{\r\n                        suggestedMin: suggestedMinY,\r\n                        suggestedMax: suggestedMaxY\r\n                      }\r\n                    }],\r\n                    xAxes: [{\r\n                        scaleLabel: {\r\n                          display: true,\r\n                          labelString: this.props.xLabel\r\n                        }\r\n                        ,\r\n                    ticks:{\r\n                        suggestedMin: suggestedMinX,\r\n                        suggestedMax: suggestedMaxX\r\n                      }\r\n                      }]\r\n                  } ,\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardContent>\r\n                <canvas\r\n                    id=\"myChart\"\r\n                    ref={this.chartRef}\r\n                />\r\n                </CardContent>\r\n            </Card>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ScatterPlot from '../scatterPlot/scatterPlot'\r\n\r\nfunction AnalysisComp() {\r\n\r\n  const graphFlexStyles = {\r\n    display:'block',\r\n    margin:'auto'\r\n  }\r\n\r\n  const plotWrapperStyles = {\r\n    display:'block',\r\n    margin: 'auto',\r\n    marginBottom:'10px',\r\n    minWidth:'320px',\r\n    width:'45%'\r\n  }\r\n\r\n  const plotStyles = {\r\n  }\r\n\r\n  const plotParentStyles = {\r\n    display:'flex',\r\n    flexWrap: 'wrap',   \r\n    margin:'auto',\r\n    width:'95%'\r\n  }\r\n\r\n  //CHART DATA \r\n\r\n  const EffectiveDifferenceData = {\r\n    title: \"AES%D vs Win% \",\r\n    xLabel: \" ES%D\",\r\n    yLabel: \" Win%\" , \r\n    xValues: [ 1 , 2, 3 , 4 , 5 , 6 , 7 , 8 ,9 ],\r\n    yValues: [ 1 , 2, 3 , 4 , 5 , 6 , 7 , 8 ,9 ],\r\n    m: 0.494,\r\n    b: 0.779\r\n  }\r\n\r\n\r\n  return(  \r\n  \r\n  <div style = {graphFlexStyles}> \r\n    <div  style ={plotParentStyles}>\r\n      <div  style={plotWrapperStyles}>\r\n      <ScatterPlot style={plotStyles} {...EffectiveDifferenceData} >\r\n        </ScatterPlot>\r\n      </div>\r\n      <div  style={plotWrapperStyles}>\r\n      <ScatterPlot {...EffectiveDifferenceData} >\r\n        </ScatterPlot>\r\n      </div>\r\n    </div>\r\n    <div  style ={plotParentStyles}>\r\n    <div  style={plotWrapperStyles}>\r\n      <ScatterPlot {...EffectiveDifferenceData}>\r\n        </ScatterPlot>\r\n      </div>\r\n      <div  style={plotWrapperStyles}>\r\n      <ScatterPlot {...EffectiveDifferenceData}>\r\n        </ScatterPlot>\r\n      </div>\r\n    </div>\r\n\r\n  </div> );  \r\n}\r\n\r\n\r\nexport default AnalysisComp;\r\n","import React from 'react';\r\n\r\nfunction ResultsComp() {\r\n  return(  <p> Template Results Comp </p> );  \r\n}\r\n\r\n\r\nexport default ResultsComp;\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n// images\r\nimport twoPointer from '../../images/2pg.jpg'\r\nimport formulaCode from '../../images/formula.PNG'\r\n\r\nfunction OverviewComp() {\r\n\r\n    const imageContainerStyles = {\r\n        display:'flex',\r\n        flexWrap: 'wrap',   \r\n        jusitfyContent:'center',\r\n      };\r\n  \r\n      const formulaStyles = {\r\n        display:'block',\r\n        margin:'auto',\r\n        maxWidth: '500px',\r\n        marginBottom: '5%',\r\n        width:'90%',\r\n        borderRadius:'5px'\r\n      };\r\n  \r\n      const twoPointerStyles ={\r\n        display:'block',\r\n        margin:'auto',\r\n        maxWidth: '400px',\r\n        width:'90%',\r\n        borderRadius:'5px'\r\n      };\r\n  \r\n      const containerContainerStyles = {\r\n        maxWidth: '950px',\r\n        display:'block',\r\n        margin:'auto'\r\n      };   \r\n\r\n\r\n\r\n  return( <div >         \r\n    <Card className =\"cardContentStyles\">\r\n        <CardContent>\r\n      Professional field lacrosse leagues have created a \"two point line\". If a \r\n      player stands behind this line when shooting, a goal is worth two \r\n      points instead of one. Effective Shooting Percentage (ES%) is a new \r\n      lacrosse statistic that accounts for the fact that a two point goal \r\n      is worth more than a one point goal. The forumla for ES% is shown below: \r\n        </CardContent>\r\n      </Card>\r\n\r\n\r\n      <br></br>\r\n      <div id =\"containerContainer\" style ={containerContainerStyles}>\r\n      <div id =\"imageContainer\" style ={imageContainerStyles}>\r\n          <img alt=\"ES% formula from es%.py\" style={formulaStyles} src={formulaCode}/>\r\n          <img alt=\"Two point shot attempt\" style={twoPointerStyles} src={twoPointer}/> \r\n      </div>\r\n      </div>\r\n      <br></br>\r\n\r\n      <Card className =\"cardContentStyles\">\r\n        <CardContent>\r\n        ES% is inspired by a powerful statistic in basketball called effective field goal percentage (EFG%). \r\n        EFG% accounts for the fact that three point shots are worth more than two point shots. \r\n        EFG% has been a significant predicator of a teams offensive performance: for example in 2013, \r\n        the Miami Heat and San Antonio Spurs had the highest EFG% and in the league and ended up meeting in the NBA finals that year. \r\n        This project aims to explore if a similar relationship between scoring efficiency and team/player success exists in professional lacrosse.\r\n        </CardContent>\r\n      </Card>\r\n  </div> );\r\n}\r\n\r\n\r\nexport default OverviewComp;\r\n","import React from 'react';\r\nimport AnalysisComp from '../components/analysis/analysis'\r\nimport ResultsComp from '../components/results/results'\r\nimport OverviewComp from '../components/overview/overview'\r\nfunction MainInfoComp() {\r\n\r\n  const wrapperStyle = {\r\n      margin:'0',\r\n      padding:'0',\r\n  }\r\n  return (    \r\n    <div style={wrapperStyle} >\r\n      <h1 className =\"headerStyles\"> Project Definition </h1>\r\n      <OverviewComp></OverviewComp>\r\n      <br></br><br></br>\r\n      <h1 className = \"headerStyles\"> Analysis </h1>\r\n      <AnalysisComp></AnalysisComp>\r\n      <br></br><br></br>\r\n      <h1 className = \"headerStyles\"> Results </h1>\r\n      <ResultsComp></ResultsComp>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default MainInfoComp;\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport beautifulSoup from '../../images/beautifulSoup.png'\r\nimport trevor from '../../images/trevor-baptiste.jpg'\r\nimport farrell from '../../images/farrell.jpg'\r\nimport lizards from '../../images/lizards.jpg'\r\nimport games from '../../images/games.jpg'\r\n\r\n\r\n\r\nfunction DataComp() {\r\n\r\n  const linkStyle = {\r\n    textDecoration: 'underline'\r\n  }\r\n\r\n  const imgWrapper = {\r\n    display:'block',\r\n    margin:'auto',\r\n    width:'35%',\r\n    minWidth:'330px'\r\n  }\r\n\r\n  const imgStyles = {\r\n      display:'block',\r\n      margin:'auto',\r\n      maxWidth: '450px',\r\n      marginBottom: '25px',\r\n      marginTop:'25px',\r\n      width:'90%',\r\n      borderRadius:'5px'\r\n  }\r\n\r\n  const flexManagerStyles = {\r\n    display:'flex',\r\n    jusitfyContent:'center',\r\n    flexWrap: 'wrap',\r\n    maxWidth:'1300px',\r\n    margin:'auto',\r\n  }\r\n\r\n  const flexChildBigStyles = {\r\n    display:'block',\r\n    margin:'auto',\r\n    maxWidth: '800px',\r\n    minWidth: '320px',\r\n    width:'65%'\r\n  }\r\n\r\n  const cardStyles = {\r\n    width: '100%'\r\n  }\r\n\r\n  return(    \r\n    <div className =\"wrapperStyles\">\r\n    <div style={flexManagerStyles} class =\"flexManager\">\r\n      <div style={flexChildBigStyles}>\r\n      <h1 className=\"headerStyles\"> Data Collection </h1>\r\n      <Card  className=\"cardContentStyles\" style ={cardStyles}>\r\n        <CardContent>\r\n          Unlike other professional sports, lacrosse has a relatively small following.\r\n          For this reason the data used for this project was not readily available. \r\n          There are currently two professional field lacrosse leagues, the \r\n          <a href = \"https://stats.premierlacrosseleague.com/\"> PLL</a> and\r\n          <a href = \"http://mll.stats.pointstreak.com/scoreboard.html\"> MLL. </a> \r\n          Each league maintains statistics on their websites.\r\n          <br></br><br></br>\r\n           To extract and aggregate data for both professional lacrosse leagues I used the \r\n           <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\"> Beautiful Soup </a>Python library,\r\n           <a href=\"https://selenium-python.readthedocs.io/\"> Selenium</a> and general knowledge of website architecture.\r\n           The scripts I wrote to scrape and analyze the data can be downloaded below. It should be noted if the regression analysis\r\n           script is run using both the MLL scraper and PLL scraper then the script will run for over 2 hours because each game in the \r\n           MLL dataset must be laoded in the browser.\r\n           <br></br><br></br>\r\n           Effective Shooting % Scripts: <a href =\"\" style={linkStyle}>pLAceHoLdEr</a>\r\n          <br></br><br></br>\r\n        </CardContent>\r\n      </Card>\r\n      </div>\r\n  \r\n      <div style ={imgWrapper}>\r\n        <img  style={imgStyles} src ={beautifulSoup} alt=\"beautifulSoup\"></img>\r\n      </div>\r\n    </div>\r\n\r\n    <br></br> <br></br>\r\n    \r\n      <div style={flexManagerStyles} class =\"flexManager\">\r\n        <div style={flexChildBigStyles} >\r\n          <h1 className=\"headerStyles\"> PLL Data </h1>\r\n            <Card  className=\"cardContentStyles\" style ={cardStyles}>\r\n              <CardContent>\r\n                Gathering data for the PLL was not terribly difficult. The league has only existed for one year \r\n                and all stats were well tracked. Each game of the 2019 season has its own page on the site.\r\n                Instead of scraping the pages directly I chose to make a GET request to the PLL's server and retrieve\r\n                 the JSON that they were loading game data from. \r\n                <br></br><br></br>\r\n                This approach made gathering the data \r\n                almost effortless but did require some work to gather the URL's for each game's JSON. This is because I needed to \r\n                reload each page while I had Google Chrome's developer tools open and watch the network tab to see when the JSON \r\n                was sent to the client. In retrospect, this approach is not very scalable and if I plan to update this project each year as new \r\n                games are played then I am going to need to automate finding the URL's for each game's JSON or write a scraper. \r\n                <br></br><br></br>\r\n                Below is an example of one of the JSON's that is used to load stats for games. I noticed in multiple places \r\n                on the PLL website that the JSON's sent to the client contained much more information than was displayed on the \r\n                page. The JSON is worth looking at, some of the information is interesting for individual players like shot's on goal,\r\n                and shooting percentage for one and two point shots. \r\n                <br></br><br></br>\r\n                <a href =\"https://dn0a11v09sa0t.cloudfront.net/BoxScores/PLL_RED_WHP_20190921_1.json\" style={linkStyle}>PLL  GAME JSON</a>\r\n              </CardContent>\r\n            </Card>\r\n        </div>\r\n\r\n        <div class =\"flexImage\" style ={imgWrapper}>\r\n          <img  style={imgStyles} src ={farrell} alt =\"Connor Farrell\"></img>\r\n        </div>    \r\n      </div>\r\n\r\n    <br></br> <br></br>\r\n    \r\n    <div style={flexManagerStyles} class =\"flexManager\">\r\n      <div style={flexChildBigStyles}>\r\n        <h1 className=\"headerStyles\"> MLL Data </h1>\r\n          <Card  className=\"cardContentStyles\" style ={cardStyles}>\r\n            <CardContent>\r\n              When compared to the PLL data, the MLL dataset was much larger, harder to gather and the statistics were tracked\r\n              poorly. While the PLL recently finished their inaugural season, the MLL has been around since 2001 and has many years worth of data \r\n              available through the league's website. The MLL outsources their statistics tracking to <a href =\"https://pointstreak.com/\"> Pointstreak.com </a>\r\n              and store their individual game data in html files they call gamesheets. Below is an example of a game sheet.\r\n              <br></br><br></br>\r\n              <a href =\"http://mll.stats.pointstreak.com/gamesheet_full.html?gameid=3209601\" style={linkStyle}>Game Sheet Example</a>             \r\n              <br></br><br></br>\r\n              Unlike the PLL, I couldn't find any JSON being sent to the client to extract data from. This forced me to scrape the \r\n              game sheets which ended up being difficult for multiple reasons. One of these reasons is that my initial scraping \r\n              attempts with Beautiful Soup returned an almost empty html file with none of the stats I needed. This is because the stats \r\n              for each game sheet are rendered after the browser loads the page with JavaScript. For this reason I used Selenium to load the \r\n              page, render the components that displayed the stats and then scraped the page using Beautiful Soup.\r\n              <br></br><br></br>\r\n              Once I had the html for each gamesheet I still needed to parse through the html and extract the stats I needed for this project.\r\n              This was harder than usual because the gamesheets were laid out in an interesting way. In general when scraping html files you will \r\n              look for id or class attributes of html elements to use to locate important information. For example there may be a table that \r\n              contains all of the players on a team and the id for that table might be \"playerTable\". The gamesheets however had almost no \r\n              elements with attributes that could be used to locate important information. Instead, I ended up creating a list of all the tables \r\n              in the page and figuring out the indexes of where the information I needed would be in that list through trial and error. This \r\n              resulted in the code for the MLL scraper taking a while to develop and not making much sense unless you understand the exact \r\n              layout of the tables in the gamesheet files.\r\n            </CardContent>\r\n          </Card>\r\n      </div>\r\n      <div class =\"flexImage\" style ={imgWrapper}>\r\n        <img  style={imgStyles} src ={trevor} alt =\"trevor-baptiste\"></img>\r\n      </div> \r\n   \r\n   </div>\r\n\r\n   <br></br> <br></br>\r\n    \r\n    <div style={flexManagerStyles} class =\"flexManager\">\r\n      <div style={flexChildBigStyles}>\r\n        <h1 className=\"headerStyles\"> Regression Data </h1>\r\n          <Card  className=\"cardContentStyles\" style ={cardStyles}>\r\n            <CardContent>\r\n              The data used for the regression analyses I conducted in this project are just subsets of the data that was \r\n              gathered form the MLL and PLL. Once I had collected all of the PLL and MLL data I was able to create \r\n              a nested Python Dictionary from that list. Python Dictionaries map keys to values. My outer dictionary \r\n              mapped teams to seasons and my inner dictionary mapped seasons to team stats. This dictionary was used to create the \r\n              teams.csv file available above. The nested dictionary structure looked like the following: \r\n              <br></br><br></br> \r\n              Teams -> Seasons -> Stats\r\n              <br></br><br></br>\r\n              As mentioned before some of the data from the MLL was poorly tracked and had to be excluded. For example if we take a look at the \r\n              gamesheet file I link to in the MLL data section, we can see there are no statistics recorded for shots attempted by either team.\r\n              This makes all of our statistics of interest impossible to calculate. I filtered these games out of the data for the regression\r\n              analysis but left them in the datsets I exported to csv format. I also removed any All-Star games from the data set since these\r\n              were likely not representative of a normal lacrosse game. Also interseting to point out, the game sheet I linked to says Baltimore\r\n              had 433 ground balls in one game. This is obviously not true and I am assuming these are season totals but, this is a another good \r\n              example of why the data from the older gamesheets can't be trusted.\r\n            </CardContent>\r\n          </Card>\r\n      </div>\r\n      <div class =\"flexImage\" style ={imgWrapper}>\r\n        <img  style={imgStyles} src ={lizards} alt =\"lizards defender\"></img>\r\n      </div>    \r\n   </div>\r\n    </div>    \r\n    );  \r\n}\r\n\r\n\r\nexport default DataComp;\r\n","import React from 'react';\r\n\r\nfunction AboutComp() {\r\n  return(  <h1> Template About Comp </h1> );  \r\n}\r\n\r\n\r\nexport default AboutComp;\r\n","import React, { Component } from \"react\";\r\nimport {\r\nMDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, \r\nMDBNavLink, MDBNavbarToggler, MDBCollapse\r\n} from \"mdbreact\";\r\nimport MainInfoComp from './MainInfoComp';\r\nimport AnalysisComp from './analysis/analysis';\r\nimport DataComp from './data/data';\r\nimport AboutComp from './about/about';\r\nimport { HashRouter as Router , Route, Switch, } from 'react-router-dom';\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\nclass NavBarComp extends Component {\r\n\r\nstate = {\r\n  isOpen: false\r\n};\r\n\r\ntoggleCollapse = () => {\r\n  this.setState({ isOpen: !this.state.isOpen });\r\n}\r\n\r\n\r\n\r\nrender() {\r\n    const navBarStyles = {\r\n        marginBottom:'20px'\r\n    }\r\n\r\n    const noMatchingPathStyles = {\r\n      width:'80%',\r\n      display:'block',\r\n      margin:'auto',\r\n      textAlign:'center'\r\n    }\r\n\r\n    const noMatchingPath = ({location}) =>\r\n    (\r\n      <div style={noMatchingPathStyles}>\r\n          <strong><h1> 404 error page not found <br></br><br></br> use the navbar above to find a page </h1></strong>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <Router  basename={'/effectiveShootingPercentage'}  >\r\n      <MDBNavbar color=\"indigo\" dark expand=\"md\" style={navBarStyles}>\r\n        <MDBNavbarBrand>\r\n        <MDBNavLink to=\"/\"><strong className=\"white-text\">Effective Shooting%</strong></MDBNavLink>\r\n        </MDBNavbarBrand>\r\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n          <MDBNavbarNav left>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"/data\">Data</MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink to=\"/about\">About</MDBNavLink>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\" component={MainInfoComp} />\r\n        <Route exact path='/data' component={DataComp} />\r\n        <Route exact path='/about' component={AboutComp} />\r\n        <Route component={noMatchingPath}></Route>\r\n      </Switch>\r\n\r\n    </Router>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default NavBarComp;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NavBarComp from './components/NavBarComp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBarComp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//NEED FOR MATERIAL DESIGN \nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/2pg.90099611.jpg\";","module.exports = __webpack_public_path__ + \"static/media/formula.23e91722.PNG\";","module.exports = __webpack_public_path__ + \"static/media/beautifulSoup.5edd424b.png\";","module.exports = __webpack_public_path__ + \"static/media/trevor-baptiste.1b210776.jpg\";","module.exports = __webpack_public_path__ + \"static/media/farrell.89c52546.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lizards.dd526669.jpg\";"],"sourceRoot":""}